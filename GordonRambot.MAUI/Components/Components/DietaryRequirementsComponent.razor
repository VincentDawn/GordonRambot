@using GordonRambot.Enums
@using GordonRambot.Shared.Clients.API_Client.DTOs

@if (CurrentStep == DietaryRequirementSteps.None)
{
    <h2 style="text-align: center; font-weight: bold;">Instructions</h2>
    <ol>
        <li><strong>Enter Allergies:</strong> Start by listing any allergies you have.</li>
        <li><strong>Choose Cuisine Styles:</strong> Select the types of cuisine you'd like to include in your recipes.</li>
        <li><strong>Specify Nutritional Constraints:</strong> Add any dietary or nutritional constraints you need to adhere to.</li>
        <li><strong>Add Food Tags:</strong> Include food tags like "vegetarian" if you want recipes specific to certain dietary preferences.</li>
        <li><strong>Select Spice Level:</strong> Choose your preferred level of spiciness for the recipes.</li>
        <li><strong>Determine Servings:</strong> Decide on the number of servings you want for your recipes.</li>
        <li><strong>List Ingredients and Weights:</strong> Finally, input the ingredients you have on hand, including their quantities or weights.</li>
    </ol>

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="() => GoToPreviousParentStep.InvokeAsync()">Go back</button>
}
else if (CurrentStep == DietaryRequirementSteps.Allergies)
{
    <AllergiesComponent Allergies="@DietaryRequirements.Allergies" />

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}
else if (CurrentStep == DietaryRequirementSteps.CuisineStyles)
{
    <CuisineStylesComponent CuisineStyles="@DietaryRequirements.CuisineStyles" />

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}
else if (CurrentStep == DietaryRequirementSteps.NutritionalConstraints)
{
    <NutritionalConstraintsComponent NutritionalConstraints="@DietaryRequirements.NutritionalConstraints" />

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}
else if (CurrentStep == DietaryRequirementSteps.FoodTags)
{
    <FoodTagsComponent FoodTags="@DietaryRequirements.FoodTags" />

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}
else if (CurrentStep == DietaryRequirementSteps.SpiceLevel)
{
    <SpiceLevelComponent SpiceLevel="@DietaryRequirements.SpiceLevel" />

    <button class="btn-settings" @onclick="GoToNextStep">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}
else if (CurrentStep == DietaryRequirementSteps.NumberOfServings)
{    
    <NumberOfServingsComponent NumberOfServings="@DietaryRequirements.NumberOfServings" />

    <button class="btn-settings" @onclick="() => GoToNextParentStep.InvokeAsync()">Next</button>
    <button class="btn-settings" @onclick="GoToPreviousStep">Previous</button>
}

@code {
    [Parameter]
    public DietaryRequirements DietaryRequirements { get; set; } = null!;

    private DietaryRequirementSteps CurrentStep;

    [Parameter]
    public EventCallback GoToNextParentStep { get; set; }

    [Parameter]
    public EventCallback GoToPreviousParentStep { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Start at first step
        CurrentStep = DietaryRequirementSteps.None;

        // Call base method
        await base.OnInitializedAsync();
    }

    private void GoToStep(DietaryRequirementSteps userFlowStep)
    {
        CurrentStep = userFlowStep;
        StateHasChanged();
    }

    private void GoToNextStep()
    {
        var nextStep = (DietaryRequirementSteps)(((int)CurrentStep) + 1);
        GoToStep(nextStep);
    }

    private void GoToPreviousStep()
    {
        var previousStep = (DietaryRequirementSteps)(((int)CurrentStep) - 1);
        GoToStep(previousStep);
    }


}
